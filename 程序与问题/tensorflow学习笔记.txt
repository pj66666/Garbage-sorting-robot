tensorflow学习笔记

创建环境
conda create -n tf1.13 pip python=3.6
激活这个环境
activate tf1.13
退出环境
deactivate
常用conda命令
conda install -n [package]安装包
conda list 查看安装了哪些包；
conda env list 或 conda info -e 查看当前存在哪些虚拟环境；
conda update conda 检查更新当前conda；
conda remove -n your_env_name(虚拟环境名称) --all删除虚拟环境；

1.配置PYTHONPATH
  要在命令行，而不是其它终端，检验时两者间要有空格。一次性设置多个python path时检验不出来的。所以第一次设置一个。有时候也不会，因电脑而异。
  set PYTHONPATH=D:\tensorflow1\models-r1.13.0;D:\tensorflow1\models-r1.13.0\research；D:\tensorflow1\models-r1.13.0\research\slim
  注意：每次退出“ tensorflow1”虚拟环境时，都会重置PYTHONPATH变量并需要再次设置。可以使用“ echo％PYTHONPATH％”来查看它是否已设置.一定要手打命令而不要复制


2.国内镜像源
（1）豆瓣 http://pypi.douban.com/simple/
（2）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/
（3）阿里云 http://mirrors.aliyun.com/pypi/simple/
（4）中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/
（5）华中科技大学 http://pypi.hustunique.com/

使用方法
在命令行输入时，原来的命令上加上 -i 和 镜像地址。
upgrade pip
python -m pip install --upgrade pip -i https://pypi.douban.com/simple

install Python packages
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jieba
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/    # labelImg

3.object_detection/protos/*.proto: No such file or directory解决办法
敲入代码，即可转换
D:\...\tensorflow\models\research>protoc .\object_detection\protos\*.proto --python_out=.

而且protos版本不能高于3.4，不行就手动转换

4.COCO API 安装（pycocotools）    运行model_train必须；运行train不需要
  TensorFlow 2 需要安装COCO API，而且最好在 object detection api之前安装，不然很有可能报错。

  在安装COCO API之前，还需要确认已经安装 

  Visual C++ 2015 Build Tools                   网站https://go.microsoft.com/fwlink/?LinkId=691126

  然后在tensorflow环境终端输入
  pip install git    或者 conda install git
  pip install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI

5.安装gpu（使用conda安装很简单，但是可能无法使用gpu，pip需要独立安装cuda和cudnn）
   pip install --ignore-installed --upgrade tensorflow-gpu==1.13.1(国外源速度可以忍受的话就安装国外源，装cpu不写gpu即可)
   检验tensorflow-gpu是否安装成功（1.x版本）
   import tensorflow as tf
   sess=tf.Session(config=tf.ConfigProto(log_device_placement=True))
   检验tensorflow-gpu是否安装成功（2.x版本）
   import tensorflow as tf
   sess=tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True))
   测试是否启用了GPU加速，可以用以下两行代码测试：
   from tensorflow.python.client import device_lib
   print(device_lib.list_local_devices())

6.NO Moudle is Nets。
  打开slim文件夹
  复制nets文件夹
  粘贴到程序目录中
  运行.py文件
  成功！

7.调用train。py
python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_mobilenet_v2_quantized_300x300_coco.config

训练时看图
tensorboard --logdir=training


8.D盘和C盘转换
   cd D:
   cd D://....//.....
9.train和test数据集都是需要标注的。图片的地址不能乱改，标注后就有了图片的原地址，这样后面转换csv文件或者record文件时会出错

10.安装labelimg
pip install labelImg

11.生成csv文件，运行相关python文件
(tensorflow1) D:\tensorflow1\models\research\object_detection> python xml_to_csv.py
12.生成tfcord时出错
      TypeError: None has type NoneType, but expected one of: int, long
      解决办法： go to generate_tfrecord.py and under def class_text_to_int, the last else statement should be a return 0, not None. This makes sense, since 	                       we are expecting an int but are getting back a none?

python generate_tfrecord.py --csv_input=images\train_labels.csv --image_dir=images\train --output_path=train.record
python generate_tfrecord.py --csv_input=images\test_labels.csv --image_dir=images\test --output_path=test.record




13.GPU内存耗尽
打开python
import os
os.environ["CUDA_VISIBLE_DEVICES"]="0"（看你的设备时0还是1）

14Windows用命令查看nvidia的GPU
nvidia-smi所在的位置为：
C:\Program Files\NVIDIA Corporation\NVSMI

cmd进入目录输入命令即可：


15tflite转换
生成对应文件夹
mkdir TFLite_model
生成pb和pbxt文件
set CONFIG_FILE=D:\\tensorflow1\models-r1.13.0\research\object_detection\training\ssd_mobilenet_v2_quantized_300x300_coco.config
set CHECKPOINT_PATH=D:\\tensorflow1\models-r1.13.0\research\object_detection\training\model.ckpt-3453
set OUTPUT_DIR=D:\\tensorflow1\models-r1.13.0\research\object_detection\TFLite_model

python export_tflite_ssd_graph.py --pipeline_config_path=%CONFIG_FILE% --trained_checkpoint_prefix=%CHECKPOINT_PATH% --output_directory=%OUTPUT_DIR% --add_postprocessing_op=true

转换为tflite文件，利用tf.py.（在树莓派部署）


生成冻截图（电脑运行）
python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/ssd_mobilenet_v2_quantized_300x300_coco.config --trained_checkpoint_prefix training/model.ckpt-65737--output_directory inference_graph

16在树莓派循环播放视频时出现了
    在使用Python编译的时候出现如下错误：

    SyntaxError: Non-ASCII character '\xe5' in file Test1.py on line 8, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details

解决方法
   python的默认编码文件是用的ASCII码，将文件存成了UTF-8，编译就可以通过。或在在py文件开头（必须是第一行）加入
#coding=utf-8
或者
# -*- coding:utf-8 -*-




cd tflite1
source tflite1-env/bin/activate
python3 TFLite_detection_webcam.py --modeldir=TFLite_model
python3 TFLite_detection_image.py --modeldir=TFLite_model
python3 webcam.py --modeldir=TFLite_model

python3 TFLite_detection_webcam.py --modeldir=Sample_TFLite_model
python3 webcam.py --modeldir=Sample_TFLite_model
